#
# readme
#
# notes on the new mac bootstrap code
#

This is, in effect, an almost total rewrite of my previous bootsector work,
but in C (with the help of some code I found in arch/amiga/stand/bootblock),
and without the SCSI access code.

Install kernels are too big to fit on a floppy disk unless they are compressed.
Unfortunately, zlib is to big to fit in 8k. The best solution I have been able
to come up with for this problem is to use a multi-stage system, the first 8k
stage containing filesystem access routines (libsa?), and the second stage
being of indeterminate size, and containing libsa, libz, and any interactive
goodies we can be bothered implementing. While the linker I sto^H^H^Hborrowed
from arch/amiga is presently limited to an 8k binary, it shouldn't be that
hard to change it to only enforce that based on a command line switch (famous
last words).

There is presently about 256 bytes of wasted space in resource.S. This space
could be recovered by allocating a separate memory block for the resource
data and copying the data in there at the appropriate places. The code for
this would take up substantially less space than the almost 256 bytes worth
of 0-fill padding currently in place.

The SE/30, and probably other machines, either doesn't have a keyboard driver
in ROM or requires special setup from the 'ADBS.2' resource in the System file.
Since I want some measure of interactivity, I wrote my own keyboard driver to
interface with the usual MacOS event queue. This driver is rather primitive,
not supporting control, option or command keys, and caps lock affects both
alphabetic and non-alphabetic characters. It also doesn't support the esc key
or any function, arrow or keypad keys.

I am presently using one undocumented trap, 0xa06d, which initializes the OS
Event Manager (takes a u16 in d0 containing the number of event queue entries,
returns nothing). I do not expect to need to use any other undocumented traps,
except possibly 0xa06c, which does the same for the File Manager, if it sets
up the drive table. If any Apple employees or former Apple employees would
care to tell me what these traps are officially named, I would appreciate it.

I see no reason to configure an application zone. QuickDraw can be set up on
the stack, and I put the stack and the A5 world in the system heap. The
linker and relocator resolve all absolute references, so the only trick is
keeping the compiler away from A5, which we do with -ffixed-a5.

When allocating memory for disk buffers, it should be possible to start at
BufPtr and just move downwards from there. Should save having to re-adjust
the heap sizes.

Something of importance will be determining the amount of RAM in the system
once we switch MMU modes. I actually don't have too much of a problem with
the first versions being limited to 8 megs, but when I break out the larger
SIMMs I will want them to work.

#
# EOF
#
